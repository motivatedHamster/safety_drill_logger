require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DrillsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Drill. As you add validations to Drill, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      date_performed: Date::strptime("04-27-2015", "%m-%d-%Y"),
      teacher_id: 1,
      classroom_id: 1,
      drill_type_id: 1,
      date_due: Date::strptime("04-27-2015", "%m-%d-%Y")
    }
  }

  let(:invalid_attributes) {
    {
      date_performed: "not_a_date",
      teacher_id: "not_an_int",
      classroom_id: "not_an_int",
      drill_type_id: "not_an_int",
      date_due: "not_a_date"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DrillsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    sign_in
  end

  before do
    sign_in
  end

  describe "GET #index" do
    it "assigns all drills as @drills" do
      drill = Drill.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:drills)).to eq([drill])
    end
  end

  describe "GET #show" do
    it "assigns the requested drill as @drill" do
      drill = Drill.create! valid_attributes
      get :show, {:id => drill.to_param}, valid_session
      expect(assigns(:drill)).to eq(drill)
    end
  end

  describe "GET #new" do
    it "assigns a new drill as @drill" do
      get :new, {}, valid_session
      expect(assigns(:drill)).to be_a_new(Drill)
    end
  end

  describe "GET #edit" do
    it "assigns the requested drill as @drill" do
      drill = Drill.create! valid_attributes
      get :edit, {:id => drill.to_param}, valid_session
      expect(assigns(:drill)).to eq(drill)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Drill" do
        expect {
          post :create, {:drill => valid_attributes}, valid_session
        }.to change(Drill, :count).by(1)
      end

      it "assigns a newly created drill as @drill" do
        post :create, {:drill => valid_attributes}, valid_session
        expect(assigns(:drill)).to be_a(Drill)
        expect(assigns(:drill)).to be_persisted
      end

      it "redirects to the created drill" do
        post :create, {:drill => valid_attributes}, valid_session
        expect(response).to redirect_to(Drill.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved drill as @drill" do
        post :create, {:drill => invalid_attributes}, valid_session
        expect(assigns(:drill)).to be_a_new(Drill)
      end

      it "re-renders the 'new' template" do
        post :create, {:drill => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          date_performed: Date::strptime("05-01-2015", "%m-%d-%Y"),
          teacher_id: 2,
          classroom_id: 2,
          drill_type_id: 2,
          date_due: Date::strptime("06-01-2015", "%m-%d-%Y")
        }
      }

      it "updates the requested drill" do
        drill = Drill.create! valid_attributes
        put :update, {:id => drill.to_param, :drill => new_attributes}, valid_session
        drill.reload
        updated_drill = Drill.find(drill.id)
        expect(updated_drill.date_performed).to eq(new_attributes[:date_performed])
        expect(updated_drill.teacher_id).to eq(new_attributes[:teacher_id])
        expect(updated_drill.classroom_id).to eq(new_attributes[:classroom_id])
        expect(updated_drill.drill_type_id).to eq(new_attributes[:drill_type_id])
        expect(updated_drill.date_due).to eq(new_attributes[:date_due])
      end

      it "assigns the requested drill as @drill" do
        drill = Drill.create! valid_attributes
        put :update, {:id => drill.to_param, :drill => valid_attributes}, valid_session
        expect(assigns(:drill)).to eq(drill)
      end

      it "redirects to the drill" do
        drill = Drill.create! valid_attributes
        put :update, {:id => drill.to_param, :drill => valid_attributes}, valid_session
        expect(response).to redirect_to(drill)
      end
    end

    context "with invalid params" do
      it "assigns the drill as @drill" do
        drill = Drill.create! valid_attributes
        put :update, {:id => drill.to_param, :drill => invalid_attributes}, valid_session
        expect(assigns(:drill)).to eq(drill)
      end

      it "re-renders the 'edit' template" do
        drill = Drill.create! valid_attributes
        put :update, {:id => drill.to_param, :drill => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested drill" do
      drill = Drill.create! valid_attributes
      expect {
        delete :destroy, {:id => drill.to_param}, valid_session
      }.to change(Drill, :count).by(-1)
    end

    it "redirects to the drills list" do
      drill = Drill.create! valid_attributes
      delete :destroy, {:id => drill.to_param}, valid_session
      expect(response).to redirect_to(drills_url)
    end
  end

end
